#!/usr/bin/env bash
# file: gitdisk
# source: https://github.com/periplume/dotfiles.git
# author: jason@bloom.us

# bash strict settings
set -o errexit
set -o nounset
set -o pipefail

# bash debugging
#set -x

# use "main" as the initial and main branch instead of deprecated "master"
_initialBranch="main"

# FUNCTIONS
printUsage () {
  cat << EOF

usage: gitdisk [OPTIONS] command [OPTIONS]

options:
 -h(elp)             print this usage page
 -l(og)              log to logfile
 -v(ersion)          print version

commands:
 create              create a local gitdisk
 mirror              attach a mirror repo
 import              import a remote gitdisk
 sync                sync to remote(s)
 new                 add a new item to gitdisk
 mv                  move item within gitdisk
 rm                  remove item from gitdisk
 open                open item

for command specific usage, eg:
$ gitdisk create help

EOF
}

printInfo () {
  cat << EOF

gitdisk treats a git repo like a disk database.  it is meant
for a single-user multi-session git repo, whether as a code 
or document repository.  it is mainly a wrapper for setting
up git repos and attaching remotes for redundancy.  it is not
meant for regular users but as a back-end "disk" setup and 
low-level gitdisk read and write command.

EOF
}

_isNameValid() {
	# arg = name
	# return 0 if legal, 1 if illegal
	# legal name: max char = 25, min=2
	#             a-z 0-9 - .
	#             first and last not - or .
	#							no double dash or dot
	#							no dash follows dot and vice versa
	local _maxChar=25
	local _minChar=2
	local _requestedName="${@}"
	local _strLength=${#_requestedName}
	echo "DEBUG: _requestedName=${_requestedName}"
	echo "DEBUG: _strLength=${#_requestedName}"
	# check length first
	if [ ${_strLength} -lt ${_minChar} -o ${_strLength} -gt ${_maxChar} ]; then
		echo "INVALID: length"
		return 1
	else
		# check for conditions we deem illegal
		case ${_requestedName} in
			-* ) echo "INVALID: leading -"; return 1 ;;
			.* ) echo "INVALID: leading ."; return 1 ;;
			*. ) echo "INVALID: trailing ."; return 1 ;;
			*- ) echo "INVALID: trailing -"; return 1 ;;
			*--* ) echo "INVALID: double dash"; return 1 ;;
			*..* ) echo "INVALID: double dot"; return 1 ;;
			*.-* ) echo "INVALID: dash follows dot"; return 1 ;;
			*-.* ) echo "INVALID: dot follows dash"; return 1 ;;
			*[^a-z0-9.-]* ) echo "INVALID: not lowercase or number"; return 1 ;; 
		esac
	fi
}

# command line processing
_getOpts () {
	# check for global command flags
	while getopts ":hvl" flag ; do
		local OPTIND
		case ${flag} in 
			h)
				printInfo ; printUsage; exit 0
				;;
 	    v)
 	      echo "VERSION: betaitch"; exit 0
				;;
			l)
				export _LOG=true
				;;
		esac
	done
	shift $((OPTIND -1))

	# (sub)command option processing
	case "${1:-}" in
		create)
			# create              create a local gitdisk
			# usage: create <name> where <name> is a full or relative path to PWD
			if [[ -z "${2:-}" ]]; then
				echo "ERROR: usage: gitdisk create <name>"
				echo "       <name> must be a full path or relative to PWD"
				exit 1
			fi
			local _desiredPath
			local _desiredName
			local _workDir="$(pwd)"
			echo "NOTICE: cmd called: $@"
			echo "NOTICE: _LOG=${_LOG:-}"
			echo "NOTICE: workdir=${_workDir}"
			# figure out the path; full or relative path allowed
			if [[ "${2}" = /* ]]; then
				_desiredPath="${2}"
				_desiredName=$(basename "${2}")
			else
				_desiredPath="${_workDir}/${2}"
				_desiredName=${2}
			fi
			echo "NOTICE: desired path is ${_desiredPath}"
			echo "NOTICE: desired name is ${_desiredName}"
			if ! _isNameValid ${_desiredName}; then
				echo "ERROR: invalid name"; exit 1
			fi
			# if writable and empty
			if [[ -w "$(dirname ${_desiredPath})" ]] && [[ ! -d "${_desiredPath}" ]]; then
				echo "OK: path is writable and empty"
				if git init -q -b "${_initialBranch}" "${_desiredPath}"; then
					echo "OK: created gitdisk as ${_desiredPath}"
				fi
			# if not writable
			elif [[ ! -w "${_desiredPath}" ]]; then
				echo "ERROR: path ${_desiredPath} is not writable"; exit 1
			else
				echo "ERROR: path ${_desiredPath} is not empty"; exit 1
			fi	
			;;
		mirror)
			# mirror              attach a mirror repo
			echo "cmd called: $@"
			echo "_LOG=${_LOG:-}"
			exit 0
			;;
		import)
			# import              import a remote gitdisk
			echo "cmd called: $@"
			echo "_LOG=${_LOG:-}"
			exit 0
			;;
		sync)
			# sync                sync to remote(s)
			echo "cmd called: $@"
			echo "_LOG=${_LOG:-}"
			exit 0
			;;
		new)
			# new                 add a new item to gitdisk
			echo "cmd called: $@"
			echo "_LOG=${_LOG:-}"
			exit 0
			;;
		mv)
			# mv                  move item within gitdisk
			echo "cmd called: $@"
			echo "_LOG=${_LOG:-}"
			exit 0
			;;
		rm)
			# rm                  remove item from gitdisk
			echo "cmd called: $@"
			echo "_LOG=${_LOG:-}"
			exit 0
			;;
		open)
			# open                open item
			echo "cmd called: $@"
			echo "_LOG=${_LOG:-}"
			exit 0
			;;
		*)
			printUsage
			exit 1
			;;
	esac
}

main() {
	_getOpts "${@}"
	return 0
}
main "${@}"

